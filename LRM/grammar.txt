# General grammar

###
# class SomeType:
#    ....
# - or -
# class SomeType extends SomeOtherType:
#    ....
###
_CLASS_ =
  _CLASS_DECLARATION_:
    _CLASS_DECLS_

###
# This is the part of the above that
# decides between the two forms
###
_CLASS_DECLARATION_ =
  class _CLASS_ID_:
| class _CLASS_ID_ extends _CLASS_ID_:

###
# Anything that goes on inside a class
# Instance variables, methods, constructors, refinements
# Also a main
###
_CLASS_DECLS_ =
  _CLASS_DECL_
| _CLASS_DECLS_
  _CLASS_DECL_

###
# Options for a declaration section:
#  1) main:
#       ....
#  2) main(String[] ____):
#       ....
#  3) [private|protected|public]:
#       ....
#  4) refinements:
#       ....
###
_CLASS_DECL_ =
  _MAIN_
| _ACCESS_TYPE_:
    _CLASS_DEFNS_
| refinements:
  _REFINE_DEFNS_

###
# Object boundary access
###
_ACCESS_TYPE_ =
  private
| protected
| public

###
# Refinements get their own section because
# we want them to be a focus of `subclassing'
# and so it is where the user especially puts
# specializations -- notice that multiple
# refinement sections can be given...
# A refinement is just like a normal method
# except it can only be private and it has
# a name like methodName.extension
###
_REFINE_DEFNS_ =
  _REFINE_DEFN_
| _REFINE_DEFNS_
  _REFINE_DEFN_

_REFINE_DEFN_ =
  _RETURN_TYPE_ _VAR_ID_._VAR_ID_ _PARAMLIST_:
    _BODY_

###
# The normal object stuff we can put inside a
# class, which includes:
#  - Instance Variables
#  - Instance Methods
#  - Instance Constructors
###
_CLASS_DEFNS_ =
  _CLASS_DEFN_
| _CLASS_DEFNS_ 
  _CLASS_DEFN_

_CLASS_DEFN_ =
  _INSTANCE_VAR_
| _INSTANCE_METHOD_
| _INSTANCE_CONSTRUCTOR_

###
# A var is just a type and a name
###
_INSTANCE_VAR_ =
  _VAR_DECL_

###
# Methods return something and take data
# They hopefully do some magic computation
###
_INSTANCE_METHOD_ =
  _RETURN_TYPE_ _VAR_ID_ _PARAMLIST_:
    _BODY_

###
# Initializers don't return anything, they
# just possibly take data and set up state
###
_INSTANCE_CONSTRUCTOR_ =
  init _PARAMLIST_:
    _BODY_

###
# Return types are either nothing or something
###
_RETURN_TYPE_ =
  unit
| _CLASS_ID_

###
# An paramlist can be the empty string, this
# way we can have methods like:
#   toString:
###
_PARAMLIST_ =
  epsilon
| ( )
| ( _PARAMS_ )

_PARAMS_ =
  _PARAM_
| _PARAMS_, _PARAM_

_PARAM_ =
  _VAR_DECL_

###
# The main is explicitly written as main
# and different objects can have different
# mains, of course.
###
_MAIN_ =
  _MAIN_HEAD_:
    _BODY_

_MAIN_HEAD_ =
  main():
| main(String[] _VAR_ID_):

###
# Declaring a variable: type & name
###
_VAR_DECL_ =
  _CLASS_ID_ _VAR_ID_

###
# Classes start with a capital
###
_CLASS_ID_ =
  _UPPER_
| _UPPER_ _ALPHANUMS_

###
# Variables do not
###
_VAR_ID_ =
  _LOWER_
| _LOWER_ _ALPHANUMS_

_ALPHANUMS_ =
  _ALPHANUM_
| _ALPHANUMS_ _ALPHANUM_

_ALPHANUM_ =
  _LOWER_
| _UPPER_
| _DIGIT_

_LOWER_ =
  [abcdefghijklmnopqrstuvwxyz]

_UPPER_ =
  [ABCDEFGHIJKLMNOPQRSTUVWXYZ]

_DIGIT_ =
  [0123456789]


###
# Now for the fun stuff -- Statements & Expressions
###
_BODY_ =
  _STATEMENTS_

_STATEMENTS_ =
  _STATEMENT_
| _STATEMENTS_
  _STATEMENT_

_STATEMENT_ =
  _LOCAL_
| _REFINEMENT_STMT_
| _ASSIGNMENT_
| _CONDITIONAL_
| _LOOP_
| _EXPRESSION_

_LOCAL_ =
  _CLASS_ID_ _VAR_ID_
| _CLASS_ID_ _VAR_ID_ := _EXPRESSION_

_REFINEMENT_STMT_ =
  refine _SPECIALIZE_
| refine _SPECIALIZE_ to _CLASS_ID_  # If you want it there for documentation...

_ASSIGNMENT_ =
  _VAR_ID_ := _EXPRESSION_           # Local Assignment
  this._VAR_ID_ := _EXPRESSION_      # Instance Assignment
  _VAR_ID_._VAR_ID_ := _EXPRESSION_  # Far Assignment

_CONDITIONAL_ =
  if ( _EXPRESSION_ ):
    _STATEMENTS_
| if ( _EXPRESSION_ ):
    _STATEMENTS_
  else:
    _STATEMENTS_

_LOOP_ =
  for (_ASSIGNMENT_, _EXPRESSION_, _ASSIGNMENT_):
    _STATEMENTS_
| while (_EXPRESSION_):
    _STATEMENTS_

_EXPRESSION_ =
  _INVOCATION_         # Make something happen
| _REFINEMENT_EXPR_    # Specialize
| _INSTANTIATION_      # Make something new
| _LITERAL_            # Literally literals
| _VAR_ID_             # Just the value of a variable
| _ARITHMETIC_         # Do some math
| _STRINGOP_           # Be fancy with strings
| _TEST_               # Tests
| ( _EXPRESSION_ )     # Grouping

_INVOCATION_ =
  this._METHOD_INVOKE_       # Instance Invocation
| _VAR_ID_._METHOD_INVOKE_   # Far Invocation

_METHOD_INVOKE_ =
  _VAR_ID_ ()
| _VAR_ID_ ( _ARGS_ )

_ARGS_ =
  _ARGS_
| _ARGS_, _ARG_

_ARG_ =
  _EXPRESSION_

_ARITHMETIC_ =
  _EXPRESSION_ _BINAR_ _EXPRESSION_
| _UNIAR_ _EXPRESSION_

_BINAR_ =
  +   # Addition
| -   # Subtraction
| *   # Multiplication
| /   # Division
| %   # Modulus

_UNIAR_ =
  -   # Negation

_STRINGOP_ =
  _EXPRESSION_ + _EXPRESSION_

_TEST_ =
  _EXPRESSION_ _BINTEST_ _EXPRESSION_
| _UNITEST_ _EXPRESSION_
| refinable(_VAR_ID_)

_BINTEST_ =
  and
| or
| xor
| <     # less than
| <=    # less than equal to
| =     # equal to
| ~=    # not equal to
| >=    # greater than equal to
| >     # 

_UNITEST_ =
  ~     # not

_INSTANTIATION_ =
  new _CLASS_ID_
| new _CLASS_ID_ ( _ARGS_ )

_REFINEMENT_EXPR_ =
  refine _SPECIALIZE_ to _CLASS_ID_

_SPECIALIZE_ =
  _VAR_ID_ ()
| _VAR_ID_ ( _ARGS_ )

_LITERAL_ =
 ...
