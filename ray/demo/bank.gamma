class Bank:
  public:
    init():
      super()
      id_counter := 0
      accounts := new Account[](100)

      /* Anonymous instantiation can `get around' protected constructors */
      Account president := (new Account(id_counter, "Bank President") {
        Float apply_interest.rate() { return 0.10; }
      })
      accounts[id_counter] := president
      id_counter += 1

    Integer open_checking(String client_name):
      Account new_account := new Checking(id_counter, client_name)
      accounts[id_counter] := new_account
      id_counter += 1
      return id_counter-1

    Integer open_savings(String client_name):
      Account new_account := new Savings(id_counter, client_name)
      accounts[id_counter] := new_account
      id_counter += 1
      return id_counter-1

    Integer apply_interest(Integer id):
      if(id > id_counter or id < 0):
        return 1
      accounts[id].apply_interest()
      return 0
    
    Float get_balance(Integer id):
      if(id > id_counter):
        system.out.printString("Invalid account number.\n")
        return -1.0
      return accounts[id].get_balance()

    Integer deposit(Integer id, Float amount):
      if(id > id_counter):
        system.out.printString("Invalid account number.\n")
        return 1

      accounts[id].deposit(amount)
      return 0

    Integer withdraw(Integer id, Float amount):
      if(id > id_counter):
        system.out.printString("Invalid account number.\n")
        return 1
      if(amount > accounts[id].get_balance()):
        return 1

      accounts[id].withdraw(amount)
      return 0

    Integer transfer(Integer from_id, Integer to_id, Float amount):
      if(from_id > id_counter):
        system.out.printString("Invalid account number.\n")
        return 1
      if(accounts[from_id].get_balance() < amount):
        system.out.printString("Insufficient funds.\n")
        return 1
      accounts[from_id].withdraw(amount)
      accounts[to_id].deposit(amount)
      return 0

    Float get_balance(Integer id, Float amount):
      if(id > id_counter):
        return -1.0
      return accounts[id].get_balance()


  protected:
    Integer id_counter
    Account[] accounts

/* Subclasses can come before classes if you like */
class Checking extends Account:
  public:
    init(Integer id, String name):
      super(id, name)

  refinement:
    Float apply_interest.rate():
      return 0.005

class Savings extends Account:
  public:
    init(Integer id, String name):
      super(id, name)

  refinement:
    Float apply_interest.rate():
      return 0.02

class Account:
  protected:
    void apply_interest(Boolean check):
      if (not (refinable(rate))):
        system.out.printString("Account must have some interest rate.\n")
        system.exit(1)

    init(Integer new_id, String name):
      super()
      apply_interest(false)

      id := new_id
      client := name
      balance := 0.0
      transactions := new Float[](100)
      trans_len := 0

  public:
    Integer get_id():
      return id

    String get_client_name():
      return client

    Float get_balance():
      return balance

    void apply_interest():
      balance *= (1.0 + (refine rate() to Float))

    Integer deposit(Float amount):
      if(amount < 0.0):
        return 1
      balance += amount
      transactions[trans_len] := amount
      trans_len += 1
      return 0

    Integer withdraw(Float amount):
      if(amount < 0.0):
        return 1
      if(balance < amount):
        return 1
      balance -= amount 
      return 0

  private:
    Integer id
    String client
    Float balance
    Float[] transactions
    Integer trans_len


class Main:
  public:
    init():
      super()
  
  main(System system, String[] args):
    Bank citibank := new Bank()
    Integer menu_lvl := 0
    Integer menu_num := 0
    Integer selection := new Integer()
    Integer account_id := -1

    while(true):
      if(menu_lvl = 0):
        system.out.printString("Please Select:\n1.Open New Account\n2.Manage Existing Account\n3.I'm the president!\n-> ")
        selection := system.in.scanInteger()
        account_id := -1
        menu_lvl := 1
      
      if(menu_lvl = 1): 
        if(selection = 1):
          system.out.printString("Your Name Please:")
          String name := new String()
          name := system.in.scanString()
          Integer checking_id := citibank.open_checking(name)
          Integer savings_id := citibank.open_savings(name)

          system.out.printString("\nDear ")
          system.out.printString(name)
          system.out.printString("\n")
          system.out.printString("Your new checking account number: ")
          system.out.printInteger(checking_id)
          system.out.printString("\n")
          system.out.printString("Your new savings account number: ")
          system.out.printInteger(savings_id)
          system.out.printString("\n")
          selection := 0
          menu_lvl := 0
        else:  
          if(selection = 2):
            if(account_id < 0):
              system.out.printString("Your Account Number Please: ")
              account_id := system.in.scanInteger()
            
            citibank.apply_interest(account_id)
            system.out.printString("Please Select:\n1.Check Balance\n2.Deposit\n3.Withdraw\n4.Transfer\n5.Exit\n-> ")
            menu_lvl := 2
            selection := system.in.scanInteger()
            if(selection = 5):
              selection := 0
              menu_lvl := 0
          else:
            if(selection = 3):
              selection := 2
              account_id := 0
              menu_lvl := 1
       
       if(menu_lvl = 2):
         if(selection = 1):
           system.out.printString("Your current balance: ")
           system.out.printFloat(citibank.get_balance(account_id))
           system.out.printString("\n")
           menu_lvl := 1
           selection := 2
         else:
           if(selection = 2):
             system.out.printString("Please enter the amount you want to deposit: ")
             Float amount := system.in.scanFloat()
             citibank.deposit(account_id, amount)
             menu_lvl := 1
             selection := 2
           else:
             if(selection = 3):
               system.out.printString("Pleaser enter the amount you want to withdraw: ")
               Float amount := system.in.scanFloat()
               citibank.withdraw(account_id, amount)
               menu_lvl := 1
               selection := 2
             else:  
               if(selection = 4):
                 system.out.printString("Please enter the account number you want to transfer to: ")
                 Integer to_account := system.in.scanInteger()
                 system.out.printString("Please enter the amount you want to transfer: ")
                 Float amount := system.in.scanFloat()
                 citibank.transfer(account_id, to_account, amount)
                 menu_lvl := 1
                 selection := 2
