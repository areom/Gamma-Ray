/* N queens iterative solution */

class ChessBoard:
  public:
    init(Integer size):
      super()
      n := size
      solution_count := 0
      arrangement := new Integer[](n)
      Integer i := 0
      while(i < n):
        arrangement[i] := -1
        i += 1
    
    Boolean test_column(Integer row):
      Integer i := 0
      while(i < row):
        if(arrangement[i] = arrangement[row]):
          return false
        i += 1
      return true

    Boolean test_diag(Integer row):
      Integer i := 0
      while(i < row):
        if(((arrangement[row] - arrangement[i]) = row - i) or ((arrangement[row] - arrangement[i]) = i - row)):
          return false
        i += 1
      return true

    Boolean test(Integer row):
      if(test_column(row) and test_diag(row)):
        return true
      else:
        return false
    
    Integer print_board():
      system.out.printString("\nSolution # ")
      system.out.printInteger(solution_count)
      system.out.printString("\n")
      Integer r := 0
      while(r < n):
        Integer c := 0
        while(c < n):
          if(arrangement[r] = c):
            system.out.printString("Q ")
          else:
            system.out.printString("* ")
          c += 1
        system.out.printString("\n")
        r += 1
      return 0
    
    Integer get_solutions():
      arrangement[0] := -1
      Integer row := 0
      while(row >= 0):
        arrangement[row] += 1
        while(arrangement[row] < n and not test(row)):
          arrangement[row] += 1
        if(arrangement[row] < n):
          if(row = n - 1):
            solution_count += 1
            print_board()
          else:
            row += 1
            arrangement[row] := -1
        else:
          row -= 1
      return 0

  private:
    Integer n
    Integer solution_count
    Integer[] arrangement
  
  main(System system, String[] args):
    system.out.printString("Chess board size: ")
    Integer size := system.in.scanInteger()
    ChessBoard nqueens := new ChessBoard(size)
    nqueens.get_solutions()
