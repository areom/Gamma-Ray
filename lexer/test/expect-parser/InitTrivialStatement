{ klass = List, parent = Some(Node), sections = { privates = [MethodMem({ returns = Some(Int), host = None, name = foo, static = false, formals = [(Int, b)], body = [] }), MethodMem({ returns = None, host = None, name = myfoo, static = false, formals = [(Int, c)], body = [] }), InitMem({ returns = None, host = None, name = init, static = false, formals = [(Int, a)], body = [Decl((Int, c), Some(Literal(Int(3)))), Decl((Int, b), Some(Binop(Arithmetic(Add), Literal(Int(2)), Id(c)))), If([(Some(Binop(NumTest(Eq), Id(a), Id(b))), [Expr(Assign(Id(c), Literal(Int(2))))]), (Some(Binop(NumTest(Grtr), Id(a), Id(b))), [Expr(Assign(Id(c), Literal(Int(3))))])]), While(Refinable(x), [])] }), VarMem((String, name)), VarMem((Int, val))], protects = [], publics = [InitMem({ returns = None, host = None, name = init, static = false, formals = [(Int, a)], body = [Decl((Int, c), Some(Literal(Int(3)))), Decl((Int, b), Some(Binop(Arithmetic(Add), Literal(Int(2)), Id(c)))), If([(Some(Binop(NumTest(Eq), Id(a), Id(b))), [Expr(Assign(Id(c), Literal(Int(2))))]), (Some(Binop(NumTest(Grtr), Id(a), Id(b))), [Expr(Assign(Id(c), Literal(Int(3))))])]), While(Binop(NumTest(Eq), Id(a), Id(b)), [])] }), VarMem((String, name)), VarMem((Int, val))], refines = [], mains = [] } }
